// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/azure"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/validate"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func resourceArmApiManagementApiRelease() *schema.Resource {
	return &schema.Resource{
		Create: resourceArmApiManagementApiReleaseCreate,
		Read:   resourceArmApiManagementApiReleaseRead,
		Update: resourceArmApiManagementApiReleaseUpdate,
		Delete: resourceArmApiManagementApiReleaseDelete,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"resource_group_name": azure.SchemaResourceGroupNameDiffSuppress(),

			"api_management_name": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.ApiManagementServiceName,
			},

			"api_name": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.ApiManagementChildName,
			},

			"api_id": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"notes": {
				Type:     schema.TypeString,
				Optional: true,
			},
		},
	}
}

func resourceArmApiManagementApiReleaseCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).apiManagement.ApiReleaseClient
	ctx := meta.(*ArmClient).StopContext

	resourceGroup := d.Get("resource_group_name").(string)
	serviceName := d.Get("api_management_name").(string)
	apiID := d.Get("api_name").(string)

	if requireResourcesToBeImported {
		resp, err := client.Get(ctx, resourceGroup, serviceName, apiID, releaseID)
		if err != nil {
			if !utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("Error checking for present of existing Api Management Api Release (Api Name %q / Api Management Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
			}
		}
		if !utils.ResponseWasNotFound(resp.Response) {
			return tf.ImportAsExistsError("azurerm_api_management_api_release", *resp.ID)
		}
	}

	apiId := d.Get("api_id").(string)
	notes := d.Get("notes").(string)

	parameters := apimanagement.ApiReleaseContract{
		APIReleaseContractProperties: &apimanagement.ApiReleaseContractProperties{
			APIID: utils.String(apiId),
			Notes: utils.String(notes),
		},
	}

	if _, err := client.Create(ctx, resourceGroup, serviceName, apiID, releaseID, parameters); err != nil {
		return fmt.Errorf("Error creating Api Management Api Release (Api Name %q / Api Management Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
	}

	resp, err := client.Get(ctx, resourceGroup, serviceName, apiID, releaseID)
	if err != nil {
		return fmt.Errorf("Error retrieving Api Management Api Release (Api Name %q / Api Management Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
	}
	if resp.ID == nil {
		return fmt.Errorf("Cannot read Api Management Api Release (Api Name %q / Api Management Name %q / Resource Group %q) ID", apiID, serviceName, resourceGroup)
	}
	d.SetId(*resp.ID)

	return resourceArmApiManagementApiReleaseRead(d, meta)
}

func resourceArmApiManagementApiReleaseRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).apiManagement.ApiReleaseClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	serviceName := id.Path["service"]
	apiID := id.Path["apis"]
	releaseID := id.Path["releases"]

	resp, err := client.Get(ctx, resourceGroup, serviceName, apiID, releaseID)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("[INFO] Api Management Api Release %q does not exist - removing from state", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error reading Api Management Api Release (Api Name %q / Api Management Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
	}

	d.Set("resource_group_name", resourceGroup)
	if aPIReleaseContractProperties := resp.APIReleaseContractProperties; aPIReleaseContractProperties != nil {
		d.Set("api_id", aPIReleaseContractProperties.APIID)
		d.Set("notes", aPIReleaseContractProperties.Notes)
	}
	d.Set("api_management_name", serviceName)
	d.Set("api_name", apiID)

	return nil
}

func resourceArmApiManagementApiReleaseUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).apiManagement.ApiReleaseClient
	ctx := meta.(*ArmClient).StopContext

	resourceGroup := d.Get("resource_group_name").(string)
	apiId := d.Get("api_id").(string)
	serviceName := d.Get("api_management_name").(string)
	apiID := d.Get("api_name").(string)
	notes := d.Get("notes").(string)

	parameters := apimanagement.ApiReleaseContract{
		APIReleaseContractProperties: &apimanagement.ApiReleaseContractProperties{
			APIID: utils.String(apiId),
			Notes: utils.String(notes),
		},
	}

	if _, err := client.Update(ctx, resourceGroup, serviceName, apiID, releaseID, parameters, ""); err != nil {
		return fmt.Errorf("Error updating Api Management Api Release (Api Name %q / Api Management Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
	}

	return resourceArmApiManagementApiReleaseRead(d, meta)
}

func resourceArmApiManagementApiReleaseDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).apiManagement.ApiReleaseClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	serviceName := id.Path["service"]
	apiID := id.Path["apis"]
	releaseID := id.Path["releases"]

	if _, err := client.Delete(ctx, resourceGroup, serviceName, apiID, releaseID, ""); err != nil {
		return fmt.Errorf("Error deleting Api Management Api Release (Api Name %q / Api Management Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
	}

	return nil
}

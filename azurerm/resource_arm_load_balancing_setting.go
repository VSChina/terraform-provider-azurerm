// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	"github.com/hashicorp/terraform/helper/validation"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/azure"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/response"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func resourceArmLoadBalancingSetting() *schema.Resource {
	return &schema.Resource{
		Create: resourceArmLoadBalancingSettingCreateUpdate,
		Read:   resourceArmLoadBalancingSettingRead,
		Update: resourceArmLoadBalancingSettingCreateUpdate,
		Delete: resourceArmLoadBalancingSettingDelete,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"name": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
			},

			"resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

			"front_door_name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"additional_latency_milliseconds": {
				Type:     schema.TypeInt,
				Optional: true,
			},

			"resource_state": {
				Type:     schema.TypeString,
				Optional: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(frontdoor.Creating),
					string(frontdoor.Enabling),
					string(frontdoor.Enabled),
					string(frontdoor.Disabling),
					string(frontdoor.Disabled),
					string(frontdoor.Deleting),
				}, false),
				Default: string(frontdoor.Creating),
			},

			"sample_size": {
				Type:     schema.TypeInt,
				Optional: true,
			},

			"successful_samples_required": {
				Type:     schema.TypeInt,
				Optional: true,
			},

			"type": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceArmLoadBalancingSettingCreateUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).loadBalancingSettingsClient
	ctx := meta.(*ArmClient).StopContext

	name := d.Get("name").(string)
	resourceGroup := d.Get("resource_group").(string)
	frontDoorName := d.Get("front_door_name").(string)

	if requireResourcesToBeImported {
		resp, err := client.Get(ctx, resourceGroup, frontDoorName, name)
		if err != nil {
			if !utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("Error checking for present of existing Load Balancing Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
			}
		}
		if !utils.ResponseWasNotFound(resp.Response) {
			return tf.ImportAsExistsError("azurerm_load_balancing_setting", *resp.ID)
		}
	}

	id := d.Get("id").(string)
	name := d.Get("name").(string)
	additionalLatencyMilliseconds := d.Get("additional_latency_milliseconds").(int)
	resourceState := d.Get("resource_state").(string)
	sampleSize := d.Get("sample_size").(int)
	successfulSamplesRequired := d.Get("successful_samples_required").(int)

	loadBalancingSettingsParameters := frontdoor.LoadBalancingSettingsModel{
		ID:   utils.String(id),
		Name: utils.String(name),
		Name: utils.String(name),
		Properties: &frontdoor.LoadBalancingSettingsProperties{
			AdditionalLatencyMilliseconds: utils.Int(additionalLatencyMilliseconds),
			ResourceState:                 frontdoor.ResourceState(resourceState),
			SampleSize:                    utils.Int(sampleSize),
			SuccessfulSamplesRequired:     utils.Int(successfulSamplesRequired),
		},
	}

	future, err := client.CreateOrUpdate(ctx, resourceGroup, frontDoorName, name, loadBalancingSettingsParameters)
	if err != nil {
		return fmt.Errorf("Error creating Load Balancing Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}
	if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
		return fmt.Errorf("Error waiting for creation of Load Balancing Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}

	resp, err := client.Get(ctx, resourceGroup, frontDoorName, name)
	if err != nil {
		return fmt.Errorf("Error retrieving Load Balancing Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}
	if resp.ID == nil {
		return fmt.Errorf("Cannot read Load Balancing Setting %q (Front Door Name %q / Resource Group %q) ID", name, frontDoorName, resourceGroup)
	}
	d.SetId(*resp.ID)

	return resourceArmLoadBalancingSettingRead(d, meta)
}

func resourceArmLoadBalancingSettingRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).loadBalancingSettingsClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	frontDoorName := id.Path["frontDoors"]
	name := id.Path["loadBalancingSettings"]

	resp, err := client.Get(ctx, resourceGroup, frontDoorName, name)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("[INFO] Load Balancing Setting %q does not exist - removing from state", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error reading Load Balancing Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}

	d.Set("name", resp.Name)
	d.Set("name", resp.Name)
	d.Set("name", resp.Name)
	d.Set("name", resp.Name)
	d.Set("resource_group", resourceGroup)
	if properties := resp.Properties; properties != nil {
		d.Set("additional_latency_milliseconds", properties.AdditionalLatencyMilliseconds)
		d.Set("resource_state", string(properties.ResourceState))
		d.Set("sample_size", properties.SampleSize)
		d.Set("successful_samples_required", properties.SuccessfulSamplesRequired)
	}
	d.Set("front_door_name", frontDoorName)
	d.Set("type", resp.Type)

	return nil
}

func resourceArmLoadBalancingSettingDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).loadBalancingSettingsClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	frontDoorName := id.Path["frontDoors"]
	name := id.Path["loadBalancingSettings"]

	future, err := client.Delete(ctx, resourceGroup, frontDoorName, name)
	if err != nil {
		if response.WasNotFound(future.Response()) {
			return nil
		}
		return fmt.Errorf("Error deleting Load Balancing Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}

	if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
		if !response.WasNotFound(future.Response()) {
			return fmt.Errorf("Error waiting for deleting Load Balancing Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
		}
	}

	return nil
}

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	"github.com/hashicorp/terraform/helper/validation"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/azure"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/response"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func resourceArmHealthProbeSetting() *schema.Resource {
	return &schema.Resource{
		Create: resourceArmHealthProbeSettingCreateUpdate,
		Read:   resourceArmHealthProbeSettingRead,
		Update: resourceArmHealthProbeSettingCreateUpdate,
		Delete: resourceArmHealthProbeSettingDelete,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"name": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
			},

			"resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

			"front_door_name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"interval_in_seconds": {
				Type:     schema.TypeInt,
				Optional: true,
			},

			"path": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"protocol": {
				Type:     schema.TypeString,
				Optional: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(frontdoor.Http),
					string(frontdoor.Https),
				}, false),
				Default: string(frontdoor.Http),
			},

			"resource_state": {
				Type:     schema.TypeString,
				Optional: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(frontdoor.Creating),
					string(frontdoor.Enabling),
					string(frontdoor.Enabled),
					string(frontdoor.Disabling),
					string(frontdoor.Disabled),
					string(frontdoor.Deleting),
				}, false),
				Default: string(frontdoor.Creating),
			},

			"type": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceArmHealthProbeSettingCreateUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).healthProbeSettingsClient
	ctx := meta.(*ArmClient).StopContext

	name := d.Get("name").(string)
	resourceGroup := d.Get("resource_group").(string)
	frontDoorName := d.Get("front_door_name").(string)

	if requireResourcesToBeImported {
		resp, err := client.Get(ctx, resourceGroup, frontDoorName, name)
		if err != nil {
			if !utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("Error checking for present of existing Health Probe Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
			}
		}
		if !utils.ResponseWasNotFound(resp.Response) {
			return tf.ImportAsExistsError("azurerm_health_probe_setting", *resp.ID)
		}
	}

	id := d.Get("id").(string)
	name := d.Get("name").(string)
	intervalInSeconds := d.Get("interval_in_seconds").(int)
	path := d.Get("path").(string)
	protocol := d.Get("protocol").(string)
	resourceState := d.Get("resource_state").(string)

	healthProbeSettingsParameters := frontdoor.HealthProbeSettingsModel{
		ID:   utils.String(id),
		Name: utils.String(name),
		Name: utils.String(name),
		Properties: &frontdoor.HealthProbeSettingsProperties{
			IntervalInSeconds: utils.Int(intervalInSeconds),
			Path:              utils.String(path),
			Protocol:          frontdoor.Protocol(protocol),
			ResourceState:     frontdoor.ResourceState(resourceState),
		},
	}

	future, err := client.CreateOrUpdate(ctx, resourceGroup, frontDoorName, name, healthProbeSettingsParameters)
	if err != nil {
		return fmt.Errorf("Error creating Health Probe Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}
	if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
		return fmt.Errorf("Error waiting for creation of Health Probe Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}

	resp, err := client.Get(ctx, resourceGroup, frontDoorName, name)
	if err != nil {
		return fmt.Errorf("Error retrieving Health Probe Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}
	if resp.ID == nil {
		return fmt.Errorf("Cannot read Health Probe Setting %q (Front Door Name %q / Resource Group %q) ID", name, frontDoorName, resourceGroup)
	}
	d.SetId(*resp.ID)

	return resourceArmHealthProbeSettingRead(d, meta)
}

func resourceArmHealthProbeSettingRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).healthProbeSettingsClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	frontDoorName := id.Path["frontDoors"]
	name := id.Path["healthProbeSettings"]

	resp, err := client.Get(ctx, resourceGroup, frontDoorName, name)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("[INFO] Health Probe Setting %q does not exist - removing from state", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error reading Health Probe Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}

	d.Set("name", resp.Name)
	d.Set("name", resp.Name)
	d.Set("name", resp.Name)
	d.Set("name", resp.Name)
	d.Set("resource_group", resourceGroup)
	d.Set("front_door_name", frontDoorName)
	if properties := resp.Properties; properties != nil {
		d.Set("interval_in_seconds", properties.IntervalInSeconds)
		d.Set("path", properties.Path)
		d.Set("protocol", string(properties.Protocol))
		d.Set("resource_state", string(properties.ResourceState))
	}
	d.Set("type", resp.Type)

	return nil
}

func resourceArmHealthProbeSettingDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).healthProbeSettingsClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	frontDoorName := id.Path["frontDoors"]
	name := id.Path["healthProbeSettings"]

	future, err := client.Delete(ctx, resourceGroup, frontDoorName, name)
	if err != nil {
		if response.WasNotFound(future.Response()) {
			return nil
		}
		return fmt.Errorf("Error deleting Health Probe Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}

	if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
		if !response.WasNotFound(future.Response()) {
			return fmt.Errorf("Error waiting for deleting Health Probe Setting %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
		}
	}

	return nil
}

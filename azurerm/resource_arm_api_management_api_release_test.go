// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/terraform"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func TestAccAzureRMApiManagementApiRelease_basic(t *testing.T) {
	resourceName := "azurerm_api_management_api_release.test"
	ri := tf.AccRandTimeInt()
	location := testLocation()

	resource.ParallelTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testCheckAzureRMApiManagementApiReleaseDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccAzureRMApiManagementApiRelease_basic(ri, location),
				Check: resource.ComposeTestCheckFunc(
					testCheckAzureRMApiManagementApiReleaseExists(resourceName),
					resource.TestCheckResourceAttrSet(resourceName, "api_id"),
					resource.TestCheckResourceAttr(resourceName, "notes", "test release"),
				),
			},
			{
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testCheckAzureRMApiManagementApiReleaseExists(resourceName string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("Api Management Api Release not found: %s", resourceName)
		}

		resourceGroup := rs.Primary.Attributes["resource_group_name"]
		serviceName := rs.Primary.Attributes["api_management_name"]
		apiID := rs.Primary.Attributes["api_name"]

		client := testAccProvider.Meta().(*ArmClient).apiManagement.ApiReleaseClient
		ctx := testAccProvider.Meta().(*ArmClient).StopContext

		if resp, err := client.Get(ctx, resourceGroup, serviceName, apiID, releaseID); err != nil {
			if utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("Bad: Api Management Api Release (Api Name %q / Api Management Name %q / Resource Group %q) does not exist", apiID, serviceName, resourceGroup)
			}
			return fmt.Errorf("Bad: Get on apiManagement.ApiReleaseClient: %+v", err)
		}

		return nil
	}
}

func testCheckAzureRMApiManagementApiReleaseDestroy(s *terraform.State) error {
	client := testAccProvider.Meta().(*ArmClient).apiManagement.ApiReleaseClient
	ctx := testAccProvider.Meta().(*ArmClient).StopContext

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "azurerm_api_management_api_release" {
			continue
		}

		resourceGroup := rs.Primary.Attributes["resource_group_name"]
		serviceName := rs.Primary.Attributes["api_management_name"]
		apiID := rs.Primary.Attributes["api_name"]

		if resp, err := client.Get(ctx, resourceGroup, serviceName, apiID, releaseID); err != nil {
			if !utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("Bad: Get on apiManagement.ApiReleaseClient: %+v", err)
			}
		}

		return nil
	}

	return nil
}

func testAccAzureRMApiManagementApiRelease_basic(rInt int, location string) string {
	return fmt.Sprintf(`
resource "azurerm_resource_group" "test" {
  name     = "acctestRG-%d"
  location = "%s"
}

resource "azurerm_api_management" "test" {
  name                = "acctestapi-mgmt-name-%d"
  location            = "%s"
  resource_group_name = "${azurerm_resource_group.test.name}"
  publisher_name      = "publisher"
  publisher_email     = "publisher@email.com"

  sku {
    name     = "Developer"
    capacity = 1
  }
}

resource "azurerm_api_management_api" "test" {
  name                = "acctestapi-name-%d"
  resource_group_name = "${azurerm_resource_group.test.name}"
  api_management_name = "${azurerm_api_management.test.name}"
  display_name        = "apitest"
  path                = "apitest"
  protocols           = ["https"]
  revision            = 1
}

resource "azurerm_api_management_api_release" "test" {
  resource_group_name = "${azurerm_resource_group.test.name}"
  api_name            = "${azurerm_api_management_api.test.name}"
  api_management_name = "${azurerm_api_management.test.name}"
  api_id              = "${azurerm_api_management_api.test.id}"
  notes               = "test release"
}
`, rInt, location, rInt, location, rInt)
}

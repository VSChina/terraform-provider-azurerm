// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm

import (
	"fmt"
	"log"

	"github.com/hashicorp/terraform/helper/schema"
	"github.com/hashicorp/terraform/helper/validation"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/azure"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/response"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func resourceArmBackendPool() *schema.Resource {
	return &schema.Resource{
		Create: resourceArmBackendPoolCreateUpdate,
		Read:   resourceArmBackendPoolRead,
		Update: resourceArmBackendPoolCreateUpdate,
		Delete: resourceArmBackendPoolDelete,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"name": {
				Type:     schema.TypeString,
				Optional: true,
				ForceNew: true,
			},

			"resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

			"front_door_name": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			"backends": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"address": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"backend_host_header": {
							Type:     schema.TypeString,
							Optional: true,
						},
						"enabled_state": {
							Type:     schema.TypeString,
							Optional: true,
							ValidateFunc: validation.StringInSlice([]string{
								string(frontdoor.Enabled),
								string(frontdoor.Disabled),
							}, false),
							Default: string(frontdoor.Enabled),
						},
						"http_port": {
							Type:     schema.TypeInt,
							Optional: true,
						},
						"https_port": {
							Type:     schema.TypeInt,
							Optional: true,
						},
						"priority": {
							Type:     schema.TypeInt,
							Optional: true,
						},
						"weight": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},

			"health_probe_settings": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"load_balancing_settings": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:     schema.TypeString,
							Optional: true,
						},
					},
				},
			},

			"resource_state": {
				Type:     schema.TypeString,
				Optional: true,
				ValidateFunc: validation.StringInSlice([]string{
					string(frontdoor.Creating),
					string(frontdoor.Enabling),
					string(frontdoor.Enabled),
					string(frontdoor.Disabling),
					string(frontdoor.Disabled),
					string(frontdoor.Deleting),
				}, false),
				Default: string(frontdoor.Creating),
			},

			"type": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resourceArmBackendPoolCreateUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).backendPoolsClient
	ctx := meta.(*ArmClient).StopContext

	name := d.Get("name").(string)
	resourceGroup := d.Get("resource_group").(string)
	frontDoorName := d.Get("front_door_name").(string)

	if requireResourcesToBeImported {
		resp, err := client.Get(ctx, resourceGroup, frontDoorName, name)
		if err != nil {
			if !utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("Error checking for present of existing Backend Pool %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
			}
		}
		if !utils.ResponseWasNotFound(resp.Response) {
			return tf.ImportAsExistsError("azurerm_backend_pool", *resp.ID)
		}
	}

	id := d.Get("id").(string)
	name := d.Get("name").(string)
	backends := d.Get("backends").([]interface{})
	healthProbeSettings := d.Get("health_probe_settings").([]interface{})
	loadBalancingSettings := d.Get("load_balancing_settings").([]interface{})
	resourceState := d.Get("resource_state").(string)

	backendPoolParameters := frontdoor.BackendPool{
		ID:   utils.String(id),
		Name: utils.String(name),
		Name: utils.String(name),
		Properties: &frontdoor.BackendPoolProperties{
			Backends:              expandArmBackendPoolBackend(backends),
			HealthProbeSettings:   expandArmBackendPoolSubResource(healthProbeSettings),
			LoadBalancingSettings: expandArmBackendPoolSubResource(loadBalancingSettings),
			ResourceState:         frontdoor.ResourceState(resourceState),
		},
	}

	future, err := client.CreateOrUpdate(ctx, resourceGroup, frontDoorName, name, backendPoolParameters)
	if err != nil {
		return fmt.Errorf("Error creating Backend Pool %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}
	if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
		return fmt.Errorf("Error waiting for creation of Backend Pool %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}

	resp, err := client.Get(ctx, resourceGroup, frontDoorName, name)
	if err != nil {
		return fmt.Errorf("Error retrieving Backend Pool %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}
	if resp.ID == nil {
		return fmt.Errorf("Cannot read Backend Pool %q (Front Door Name %q / Resource Group %q) ID", name, frontDoorName, resourceGroup)
	}
	d.SetId(*resp.ID)

	return resourceArmBackendPoolRead(d, meta)
}

func resourceArmBackendPoolRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).backendPoolsClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	frontDoorName := id.Path["frontDoors"]
	name := id.Path["backendPools"]

	resp, err := client.Get(ctx, resourceGroup, frontDoorName, name)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("[INFO] Backend Pool %q does not exist - removing from state", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error reading Backend Pool %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}

	d.Set("name", resp.Name)
	d.Set("name", resp.Name)
	d.Set("name", resp.Name)
	d.Set("name", resp.Name)
	d.Set("resource_group", resourceGroup)
	if properties := resp.Properties; properties != nil {
		if err := d.Set("backends", flattenArmBackendPoolBackend(properties.Backends)); err != nil {
			return fmt.Errorf("Error setting `backends`: %+v", err)
		}
		if err := d.Set("health_probe_settings", flattenArmBackendPoolSubResource(properties.HealthProbeSettings)); err != nil {
			return fmt.Errorf("Error setting `health_probe_settings`: %+v", err)
		}
		if err := d.Set("load_balancing_settings", flattenArmBackendPoolSubResource(properties.LoadBalancingSettings)); err != nil {
			return fmt.Errorf("Error setting `load_balancing_settings`: %+v", err)
		}
		d.Set("resource_state", string(properties.ResourceState))
	}
	d.Set("front_door_name", frontDoorName)
	d.Set("type", resp.Type)

	return nil
}

func resourceArmBackendPoolDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).backendPoolsClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	frontDoorName := id.Path["frontDoors"]
	name := id.Path["backendPools"]

	future, err := client.Delete(ctx, resourceGroup, frontDoorName, name)
	if err != nil {
		if response.WasNotFound(future.Response()) {
			return nil
		}
		return fmt.Errorf("Error deleting Backend Pool %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
	}

	if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
		if !response.WasNotFound(future.Response()) {
			return fmt.Errorf("Error waiting for deleting Backend Pool %q (Front Door Name %q / Resource Group %q): %+v", name, frontDoorName, resourceGroup, err)
		}
	}

	return nil
}

func expandArmBackendPoolBackend(input []interface{}) *frontdoor.Backend {
	if len(input) == 0 {
		return nil
	}
	v := input[0].(map[string]interface{})

	address := v["address"].(string)
	httpPort := v["http_port"].(int)
	httpsPort := v["https_port"].(int)
	enabledState := v["enabled_state"].(string)
	priority := v["priority"].(int)
	weight := v["weight"].(int)
	backendHostHeader := v["backend_host_header"].(string)

	result := frontdoor.Backend{
		Address:           utils.String(address),
		BackendHostHeader: utils.String(backendHostHeader),
		EnabledState:      frontdoor.backendEnabledState(enabledState),
		HttpPort:          utils.Int(httpPort),
		HttpsPort:         utils.Int(httpsPort),
		Priority:          utils.Int(priority),
		Weight:            utils.Int(weight),
	}
	return &result
}

func expandArmBackendPoolSubResource(input []interface{}) *frontdoor.SubResource {
	if len(input) == 0 {
		return nil
	}
	v := input[0].(map[string]interface{})

	id := v["id"].(string)

	result := frontdoor.SubResource{
		ID: utils.String(id),
	}
	return &result
}

func flattenArmBackendPoolBackend(input *frontdoor.Backend) []interface{} {
	if input == nil {
		return make([]interface{}, 0)
	}

	result := make(map[string]interface{})

	if address := input.Address; address != nil {
		result["address"] = *address
	}
	if backendHostHeader := input.BackendHostHeader; backendHostHeader != nil {
		result["backend_host_header"] = *backendHostHeader
	}
	result["enabled_state"] = string(input.EnabledState)
	if httpPort := input.HttpPort; httpPort != nil {
		result["http_port"] = *httpPort
	}
	if httpsPort := input.HttpsPort; httpsPort != nil {
		result["https_port"] = *httpsPort
	}
	if priority := input.Priority; priority != nil {
		result["priority"] = *priority
	}
	if weight := input.Weight; weight != nil {
		result["weight"] = *weight
	}

	return []interface{}{result}
}

func flattenArmBackendPoolSubResource(input *frontdoor.SubResource) []interface{} {
	if input == nil {
		return make([]interface{}, 0)
	}

	result := make(map[string]interface{})

	if id := input.ID; id != nil {
		result["id"] = *id
	}

	return []interface{}{result}
}

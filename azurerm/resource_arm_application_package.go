// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm

import (
	"fmt"
	"log"

	"github.com/Azure/azure-sdk-for-go/services/batch/mgmt/2018-12-01/batch"
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/azure"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/validate"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func resourceArmApplicationPackage() *schema.Resource {
	return &schema.Resource{
		Create: resourceArmApplicationPackageCreateUpdate,
		Read:   resourceArmApplicationPackageRead,
		Update: resourceArmApplicationPackageCreateUpdate,
		Delete: resourceArmApplicationPackageDelete,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

			"account_name": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.NoEmptyStrings,
			},

			"application_name": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.NoEmptyStrings,
			},

			"version_name": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.NoEmptyStrings,
			},

			"etag": {
				Type:     schema.TypeString,
				Computed: true,
			},

			"format": {
				Type:     schema.TypeString,
				Computed: true,
			},

			// TODO: Property 'lastActivationTime' of type Api::Azure::Type::ISO8601DateTime is not supported in primitive.erb

			"state": {
				Type:     schema.TypeString,
				Computed: true,
			},

			"storage_url": {
				Type:     schema.TypeString,
				Computed: true,
			},

			// TODO: Property 'storageUrlExpiry' of type Api::Azure::Type::ISO8601DateTime is not supported in primitive.erb
		},
	}
}

func resourceArmApplicationPackageCreateUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).applicationPackageClient
	ctx := meta.(*ArmClient).StopContext

	resourceGroup := d.Get("resource_group").(string)
	accountName := d.Get("account_name").(string)
	applicationName := d.Get("application_name").(string)
	versionName := d.Get("version_name").(string)

	if requireResourcesToBeImported {
		resp, err := client.Get(ctx, resourceGroup, accountName, applicationName, versionName)
		if err != nil {
			if !utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("Error checking for present of existing Application Package (Version Name %q / Application Name %q / Account Name %q / Resource Group %q): %+v", versionName, applicationName, accountName, resourceGroup, err)
			}
		}
		if !utils.ResponseWasNotFound(resp.Response) {
			return tf.ImportAsExistsError("azurerm_application_package", *resp.ID)
		}
	}

	parameters := batch.ApplicationPackage{}

	if _, err := client.Create(ctx, resourceGroup, accountName, applicationName, versionName, parameters); err != nil {
		return fmt.Errorf("Error creating Application Package (Version Name %q / Application Name %q / Account Name %q / Resource Group %q): %+v", versionName, applicationName, accountName, resourceGroup, err)
	}

	resp, err := client.Get(ctx, resourceGroup, accountName, applicationName, versionName)
	if err != nil {
		return fmt.Errorf("Error retrieving Application Package (Version Name %q / Application Name %q / Account Name %q / Resource Group %q): %+v", versionName, applicationName, accountName, resourceGroup, err)
	}
	if resp.ID == nil {
		return fmt.Errorf("Cannot read Application Package (Version Name %q / Application Name %q / Account Name %q / Resource Group %q) ID", versionName, applicationName, accountName, resourceGroup)
	}
	d.SetId(*resp.ID)

	return resourceArmApplicationPackageRead(d, meta)
}

func resourceArmApplicationPackageRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).applicationPackageClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	accountName := id.Path["batchAccounts"]
	applicationName := id.Path["applications"]
	versionName := id.Path["versions"]

	resp, err := client.Get(ctx, resourceGroup, accountName, applicationName, versionName)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("[INFO] Application Package %q does not exist - removing from state", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error reading Application Package (Version Name %q / Application Name %q / Account Name %q / Resource Group %q): %+v", versionName, applicationName, accountName, resourceGroup, err)
	}

	d.Set("resource_group", resourceGroup)
	d.Set("account_name", accountName)
	d.Set("application_name", applicationName)
	d.Set("etag", resp.Etag)
	if applicationPackageProperties := resp.ApplicationPackageProperties; applicationPackageProperties != nil {
		d.Set("format", applicationPackageProperties.Format)
		// TODO: SDK Reference /properties/lastActivationTime is not supported
		d.Set("state", string(applicationPackageProperties.State))
		d.Set("storage_url", applicationPackageProperties.StorageURL)
		// TODO: SDK Reference /properties/storageUrlExpiry is not supported
	}
	d.Set("version_name", versionName)

	return nil
}

func resourceArmApplicationPackageDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).applicationPackageClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	accountName := id.Path["batchAccounts"]
	applicationName := id.Path["applications"]
	versionName := id.Path["versions"]

	if _, err := client.Delete(ctx, resourceGroup, accountName, applicationName, versionName); err != nil {
		return fmt.Errorf("Error deleting Application Package (Version Name %q / Application Name %q / Account Name %q / Resource Group %q): %+v", versionName, applicationName, accountName, resourceGroup, err)
	}

	return nil
}

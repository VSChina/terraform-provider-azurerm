// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm

import (
	"fmt"

	"github.com/hashicorp/terraform/helper/schema"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/azure"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/validate"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func dataSourceArmApiManagementApiRelease() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceArmApiManagementApiReleaseRead,

		Schema: map[string]*schema.Schema{
			"resource_group_name": azure.SchemaResourceGroupNameForDataSource(),

			"api_management_name": {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: validate.ApiManagementServiceName,
			},

			"api_name": {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: validate.ApiManagementChildName,
			},

			"api_id": {
				Type:     schema.TypeString,
				Computed: true,
			},

			"notes": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func dataSourceArmApiManagementApiReleaseRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).apiManagement.ApiReleaseClient
	ctx := meta.(*ArmClient).StopContext

	resourceGroup := d.Get("resource_group_name").(string)
	serviceName := d.Get("api_management_name").(string)
	apiID := d.Get("api_name").(string)

	resp, err := client.Get(ctx, resourceGroup, serviceName, apiID, releaseID)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			return fmt.Errorf("Error: Api Management Api Release (Api Name %q / Api Management Name %q / Resource Group %q) was not found", apiID, serviceName, resourceGroup)
		}
		return fmt.Errorf("Error reading Api Management Api Release (Api Name %q / Api Management Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
	}

	d.SetId(*resp.ID)

	d.Set("resource_group_name", resourceGroup)
	if aPIReleaseContractProperties := resp.APIReleaseContractProperties; aPIReleaseContractProperties != nil {
		d.Set("api_id", aPIReleaseContractProperties.APIID)
		d.Set("notes", aPIReleaseContractProperties.Notes)
	}
	d.Set("api_management_name", serviceName)
	d.Set("api_name", apiID)

	return nil
}
